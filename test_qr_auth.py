#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories
"""

import json
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from telegram_manager import TelegramManager


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if os.path.exists('config.json'):
        with open('config.json', 'r') as f:
            return json.load(f)
    return {}


def print_separator():
    """–ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è"""
    print("=" * 60)


def main():
    print_separator()
    print("üîê –¢–ï–°–¢ QR-–ê–í–¢–û–†–ò–ó–ê–¶–ò–ò TELEGRAM")
    print_separator()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()

    if not config.get('telegram_api_id') or not config.get('telegram_api_hash'):
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API_ID –∏–ª–∏ API_HASH")
        print("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ config.json")
        return

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    phone = config.get('telegram_phone', '+79999999999')
    manager = TelegramManager(
        api_id=int(config['telegram_api_id']),
        api_hash=config['telegram_api_hash'],
        phone=phone
    )

    print(f"\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    print(f"üîë API ID: {config['telegram_api_id']}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

    if manager.is_authorized():
        user_info = manager.get_user_info()
        print("\n‚úÖ –£–ñ–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù!")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['first_name']} {user_info.get('last_name', '')}")
        print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"üÜî ID: {user_info['id']}")

        if user_info.get('premium'):
            print("‚≠ê Premium: –ê–∫—Ç–∏–≤–µ–Ω")

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories")
        print("2. –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–≤—ã—Ö–æ–¥ –∏ –Ω–æ–≤—ã–π –≤—Ö–æ–¥)")
        print("3. –í—ã—Ö–æ–¥")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()

        if choice == '1':
            test_story_publication(manager)
        elif choice == '2':
            print("\nüö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            if manager.logout():
                print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥")
                perform_qr_auth(manager)
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ")
        elif choice == '3':
            print("\nüö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            if manager.logout():
                print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ")
    else:
        print("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        perform_qr_auth(manager)


def perform_qr_auth(manager):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print("üì± QR-–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º QR-–∫–æ–¥
    print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞...")
    success, qr_url = manager.get_qr_code()

    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞: {qr_url}")
        return

    print("\n‚úÖ QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
    print("\nüì± –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ")
    print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
    print("3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥")
    print("\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è QR-–∫–æ–¥–∞:")
    print(qr_url)

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
    try:
        import qrcode
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=1,
            border=2,
        )
        qr.add_data(qr_url)
        qr.make(fit=True)

        print("\n" + "QR-–ö–û–î:" + "\n")
        qr.print_ascii(invert=True)
    except ImportError:
        print("\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ qrcode –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
        print("pip install qrcode[pil]")

    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (2 –º–∏–Ω—É—Ç—ã)...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    import time
    timeout = 120
    start_time = time.time()

    try:
        while time.time() - start_time < timeout:
            result = manager.check_qr_auth()

            if result.get('success'):
                if result.get('authorized'):
                    print("\n" + "=" * 60)
                    print("‚úÖ –£–°–ü–ï–®–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø!")
                    print("=" * 60)

                    user = result.get('user', {})
                    print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name', '')} {user.get('last_name', '')}")
                    print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                    print(f"üÜî ID: {user.get('id', '')}")

                    if user.get('premium'):
                        print("‚≠ê Premium: –ê–∫—Ç–∏–≤–µ–Ω")

                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç
                    if input("\nüéØ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é Stories? (y/n): ").lower() == 'y':
                        test_story_publication(manager)

                    return
                else:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
                    remaining = int(timeout - (time.time() - start_time))
                    print(f"\r‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... (–æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫)", end='', flush=True)

            time.sleep(2)

        print("\n\n‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


def test_story_publication(manager):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories"""
    print("\n" + "=" * 60)
    print("üì∏ –¢–ï–°–¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò STORIES")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    try:
        from PIL import Image, ImageDraw, ImageFont
        import io

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 9:16 (1080x1920)
        img = Image.new('RGB', (1080, 1920), color='#667eea')
        draw = ImageDraw.Draw(img)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        text = "–¢–µ—Å—Ç Stories"

        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
        try:
            font = ImageFont.truetype("arial.ttf", 100)
        except:
            font = ImageFont.load_default()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

        x = (1080 - text_width) // 2
        y = (1920 - text_height) // 2

        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±–≤–æ–¥–∫–æ–π
        for adj in range(-3, 4):
            for adj2 in range(-3, 4):
                draw.text((x + adj, y + adj2), text, font=font, fill='black')
        draw.text((x, y), text, font=font, fill='white')

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        img_bytes = io.BytesIO()
        img.save(img_bytes, format='JPEG', quality=95)
        img_bytes.seek(0)
        image_data = img_bytes.read()

        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")

    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Pillow –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
        print("pip install Pillow")
        return

    # –ü—É–±–ª–∏–∫—É–µ–º Story
    print("\nüì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –ª–∏—á–Ω—ã–µ Stories...")

    result = manager.publish_personal_story(
        image_bytes=image_data,
        caption="üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç –±–æ—Ç–∞"
    )

    if result['success']:
        print("\n‚úÖ –ò–°–¢–û–†–ò–Ø –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ê!")
        print(f"üÜî ID –∏—Å—Ç–æ—Ä–∏–∏: {result.get('story_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print("\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ Stories –≤ Telegram!")
    else:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {result['error']}")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
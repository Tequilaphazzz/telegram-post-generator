"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram —Å QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Stories
–°–æ–≤–º–µ—Å—Ç–∏–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º app.py
"""

from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.stories import SendStoryRequest
from telethon.tl.types import (
    InputMediaUploadedPhoto,
    InputPrivacyValueAllowAll,
    InputPrivacyValueAllowContacts
)
from telethon.errors import (
    SessionPasswordNeededError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    FloodWaitError
)
from typing import Optional, Dict, Any
import asyncio
import io
import json
import os
import time


class TelegramPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ Telegram"""

    def __init__(
        self,
        api_id: str,
        api_hash: str,
        phone: str,
        session_file: str = 'telegram_sessions.json'
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞

        Args:
            api_id: Telegram API ID (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω)
            api_hash: Telegram API Hash
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            session_file: –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º api_id –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(api_id, str):
            api_id = int(api_id)

        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone.strip()

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not self.phone.startswith('+'):
            self.phone = '+' + self.phone

        self.session_file = session_file
        self.client = None
        self.session_string = self._load_session()

        # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è phone_code_hash –ø—Ä–∏ –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self._phone_code_hash = None

        # –î–ª—è QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self._qr_login = None

        print(f"üì± TelegramPublisher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {self.phone}")

    def _load_session(self) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.session_file):
                with open(self.session_file, 'r', encoding='utf-8') as f:
                    sessions = json.load(f)
                    return sessions.get(self.phone)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")
        return None

    def _save_session(self, session_string: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            sessions = {}
            if os.path.exists(self.session_file):
                try:
                    with open(self.session_file, 'r', encoding='utf-8') as f:
                        sessions = json.load(f)
                except:
                    sessions = {}

            sessions[self.phone] = session_string

            with open(self.session_file, 'w', encoding='utf-8') as f:
                json.dump(sessions, f, indent=2)

            print(f"üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è {self.phone}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")

    async def connect(self) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram

        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏–ª–∏ –ø—É—Å—Ç–æ–π
            session = StringSession(self.session_string) if self.session_string else StringSession()

            self.client = TelegramClient(
                session,
                self.api_id,
                self.api_hash,
                connection_retries=5,
                retry_delay=1
            )

            await self.client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if await self.client.is_user_authorized():
                print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                me = await self.client.get_me()
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''}")
                return True

            print("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥")

            # –ü—Ä–æ–±—É–µ–º QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞
            try:
                print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                qr_result = await self._try_qr_login()
                if qr_result:
                    return True
            except Exception as e:
                print(f"‚ö†Ô∏è QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

            # –ï—Å–ª–∏ QR –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS-–∫–æ–¥
            print("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")

            try:
                sent = await self.client.send_code_request(self.phone)
                self._phone_code_hash = sent.phone_code_hash
                print("üì® –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")

                # –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã app.py –∑–Ω–∞–ª, —á—Ç–æ –Ω—É–∂–µ–Ω –∫–æ–¥
                return False

            except FloodWaitError as e:
                print(f"‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ QR-—Ä–µ–∂–∏–º
                print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ qr_auth.py")
                raise Exception(f"–§–ª—É–¥-–±–∞–Ω –Ω–∞ {e.seconds} —Å–µ–∫—É–Ω–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            if self.client:
                await self.client.disconnect()
                self.client = None
            raise

    async def _try_qr_login(self) -> bool:
        """
        –ü–æ–ø—ã—Ç–∫–∞ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)

        Returns:
            True –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR
            self._qr_login = await self.client.qr_login()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º URL –¥–ª—è QR
            print("\n" + "="*60)
            print("üì± QR-–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –î–û–°–¢–£–ü–ù–ê!")
            print("="*60)
            print("\n–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏")
            print("–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç qr_auth.py –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞:")
            print(f"\n{self._qr_login.url}\n")
            print("–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)...")
            print("="*60)

            # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
            await asyncio.wait_for(self._qr_login.wait(), timeout=30)

            # –£—Å–ø–µ—Ö!
            me = await self.client.get_me()
            print(f"\n‚úÖ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            self.session_string = self.client.session.save()
            self._save_session(self.session_string)

            return True

        except asyncio.TimeoutError:
            print("\n‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è QR –∏—Å—Ç–µ–∫–ª–æ")
            return False
        except Exception as e:
            print(f"\n‚ö†Ô∏è QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            return False

    async def verify_code(self, code: str) -> bool:
        """
        –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

        Args:
            code: –ö–æ–¥ –∏–∑ Telegram

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.client:
            raise Exception("–ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ connect()")

        try:
            print(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞: {code}")

            # –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
            code = code.strip().replace(' ', '').replace('-', '')

            # –í—Ö–æ–¥–∏–º —Å –∫–æ–¥–æ–º
            await self.client.sign_in(
                phone=self.phone,
                code=code,
                phone_code_hash=self._phone_code_hash
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await self.client.get_me()
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            self.session_string = self.client.session.save()
            self._save_session(self.session_string)

            # –û—á–∏—â–∞–µ–º phone_code_hash
            self._phone_code_hash = None

            return True

        except SessionPasswordNeededError:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA")
            raise Exception("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.")

        except PhoneCodeInvalidError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
            raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏–∑ Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        except PhoneCodeExpiredError:
            print("‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫")
            self._phone_code_hash = None
            raise Exception("–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise

    async def publish_post(
        self,
        group_username: str,
        text: str,
        image: Optional[bytes] = None,
        publish_to_story: bool = True,
        story_type: str = 'channel'
    ) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤ Stories

        Args:
            group_username: Username –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            publish_to_story: –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–∏ –≤ Stories
            story_type: –¢–∏–ø Stories ('channel', 'personal', 'both', 'none')

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        if not self.client or not self.client.is_connected():
            raise Exception("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram")

        if not await self.client.is_user_authorized():
            raise Exception("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        results = {}

        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username
            if group_username.startswith('@'):
                group_username = group_username[1:]

            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            try:
                entity = await self.client.get_entity(group_username)
            except:
                # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–π ID
                entity = await self.client.get_entity(int(group_username))

            # –ü—É–±–ª–∏–∫—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç
            if image:
                # –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                img_io = io.BytesIO(image)
                img_io.name = 'post.jpg'
                img_io.seek(0)

                message = await self.client.send_file(
                    entity,
                    img_io,
                    caption=text
                )
            else:
                # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                message = await self.client.send_message(entity, text)

            results['group_post'] = {
                'status': 'success',
                'message_id': message.id,
                'chat_id': entity.id,
                'chat_title': getattr(entity, 'title', group_username)
            }

            print(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (ID: {message.id})")

        except Exception as e:
            results['group_post'] = {
                'status': 'error',
                'error': str(e)
            }
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è Stories –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if publish_to_story and image and story_type != 'none':

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Stories (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª–æ–≤)
            story_caption = text[:200] if len(text) <= 200 else text[:197] + "..."

            # Stories –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
            if story_type in ('channel', 'both') and 'entity' in locals():
                try:
                    results['channel_story'] = await self._publish_channel_story(
                        entity, image, story_caption
                    )
                except Exception as e:
                    results['channel_story'] = {
                        'status': 'error',
                        'error': str(e)
                    }

            # –õ–∏—á–Ω—ã–µ Stories
            if story_type in ('personal', 'both'):
                try:
                    results['personal_story'] = await self._publish_personal_story(
                        image, story_caption
                    )
                except Exception as e:
                    results['personal_story'] = {
                        'status': 'error',
                        'error': str(e)
                    }

        return results

    async def _publish_channel_story(
        self,
        entity,
        image: bytes,
        caption: str
    ) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è Story –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É

        Args:
            entity: –°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
            caption: –ü–æ–¥–ø–∏—Å—å

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            print(f"üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Story –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_io = io.BytesIO(image)
            img_io.name = 'story.jpg'
            img_io.seek(0)

            uploaded = await self.client.upload_file(img_io)
            media = InputMediaUploadedPhoto(file=uploaded)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
            privacy = [InputPrivacyValueAllowAll()]

            # –ü—É–±–ª–∏–∫—É–µ–º Story
            result = await self.client(SendStoryRequest(
                peer=entity,
                media=media,
                caption=caption,
                privacy_rules=privacy,
                pinned=False,
                noforwards=False,
                period=86400  # 24 —á–∞—Å–∞
            ))

            print("‚úÖ Story –≤ –∫–∞–Ω–∞–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

            return {
                'status': 'success',
                'message': 'Story –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª'
            }

        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story –≤ –∫–∞–Ω–∞–ª: {e}")

            # Fallback: –ø—É–±–ª–∏–∫—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π
            try:
                print("üîÑ –ü—É–±–ª–∏–∫—É–µ–º –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç...")

                img_io = io.BytesIO(image)
                img_io.name = 'story_alt.jpg'
                img_io.seek(0)

                alt_message = await self.client.send_file(
                    entity,
                    img_io,
                    caption=f"üì∏ STORY\n\n{caption}"
                )

                return {
                    'status': 'success',
                    'message': '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç',
                    'message_id': alt_message.id
                }
            except Exception as e2:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story: {e}, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: {e2}")

    async def _publish_personal_story(
        self,
        image: bytes,
        caption: str
    ) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ–π Story

        Args:
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
            caption: –ü–æ–¥–ø–∏—Å—å

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            print(f"üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ–π Story...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_io = io.BytesIO(image)
            img_io.name = 'personal_story.jpg'
            img_io.seek(0)

            uploaded = await self.client.upload_file(img_io)
            media = InputMediaUploadedPhoto(file=uploaded)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
            privacy = [InputPrivacyValueAllowAll()]

            # –ü—É–±–ª–∏–∫—É–µ–º –ª–∏—á–Ω—É—é Story
            result = await self.client(SendStoryRequest(
                peer='me',  # –õ–∏—á–Ω–∞—è Story
                media=media,
                caption=caption,
                privacy_rules=privacy,
                pinned=False,
                noforwards=False,
                period=86400  # 24 —á–∞—Å–∞
            ))

            print("‚úÖ –õ–∏—á–Ω–∞—è Story –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

            return {
                'status': 'success',
                'message': '–õ–∏—á–Ω–∞—è Story –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞'
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª–∏—á–Ω–æ–π Story: {e}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–∏—á–Ω—É—é Story: {e}")

    async def check_story_support(self, group_username: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Stories –¥–ª—è –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞

        Args:
            group_username: Username –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ Stories
        """
        try:
            if not self.client or not await self.client.is_user_authorized():
                return {
                    'supported': False,
                    'reason': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
                }

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º username
            if group_username.startswith('@'):
                group_username = group_username[1:]

            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å
            entity = await self.client.get_entity(group_username)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏
            entity_type = type(entity).__name__

            # –í –æ–±—â–µ–º —Å–ª—É—á–∞–µ Stories –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –≥–¥–µ –º—ã –∞–¥–º–∏–Ω—ã
            me = await self.client.get_me()

            return {
                'supported': True,
                'entity_type': entity_type,
                'alternative_available': True,
                'premium_required': not getattr(me, 'premium', False),
                'info': 'Stories –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç'
            }

        except Exception as e:
            return {
                'supported': False,
                'reason': str(e)
            }

    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram"""
        if self.client and self.client.is_connected():
            await self.client.disconnect()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Telegram")
            self.client = None

    async def get_me(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not self.client or not await self.client.is_user_authorized():
            return None

        try:
            return await self.client.get_me()
        except:
            return None
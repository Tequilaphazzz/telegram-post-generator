"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Stories –∫–∞–Ω–∞–ª–æ–≤
"""
from telethon import TelegramClient, events
from telethon.tl.types import InputPeerChannel, InputPeerChat, InputPeerUser
from telethon.tl.functions.stories import SendStoryRequest, CanSendStoryRequest
from telethon.tl.types import InputMediaUploadedPhoto, InputPrivacyValueAllowAll
from telethon.tl.types import MessageMediaPhoto
import asyncio
import io
from typing import Optional, Dict, Any
from config import Config

class TelegramPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram"""

    def __init__(self, api_id: str, api_hash: str, phone: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞

        Args:
            api_id: Telegram API ID (–±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —á–∏—Å–ª–æ)
            api_hash: Telegram API Hash
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        """
        # –í–ê–ñ–ù–û: –£–±–µ–¥–∏–º—Å—è —á—Ç–æ api_id - —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            self.api_id = int(str(api_id).strip())
        except ValueError:
            raise Exception(f"API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {api_id}")

        self.api_hash = str(api_hash).strip()
        if not self.api_hash:
            raise Exception("API Hash –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        self.phone = str(phone).strip()
        if not self.phone.startswith('+'):
            self.phone = '+' + self.phone

        self.client = None
        self.session_name = 'telegram_session'

        print(f"‚úÖ Telegram Publisher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        print(f"   API ID: {self.api_id}")
        print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}")

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            if not self.client:
                print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
                self.client = TelegramClient(
                    self.session_name,
                    self.api_id,
                    self.api_hash
                )

            print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await self.client.connect()

            if not await self.client.is_user_authorized():
                print("üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞...")
                await self.client.send_code_request(self.phone)
                return False

            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            raise

    async def verify_code(self, code: str):
        """
        –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

        Args:
            code: –ö–æ–¥ –∏–∑ Telegram
        """
        if not self.client:
            await self.connect()

        try:
            print(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º: {code}")
            await self.client.sign_in(self.phone, code)
            print("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {error_msg}")

            if "password" in error_msg.lower():
                print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                raise Exception("–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ 2FA –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram")

            raise Exception(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {error_msg}")

    async def publish_to_channel_story(self, channel_entity, image: bytes, caption: str) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è Story –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É

        Args:
            channel_entity: –°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –∏—Å—Ç–æ—Ä–∏–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            print(f"üì∏ –ü–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –≤ –∫–∞–Ω–∞–ª–µ
                chat_entity = await self.client.get_entity(channel_entity)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                if hasattr(chat_entity, 'admin_rights') and chat_entity.admin_rights:
                    print("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é stories
                    if hasattr(chat_entity.admin_rights, 'post_stories') and not chat_entity.admin_rights.post_stories:
                        print("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é Stories –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ")
                        return {
                            'status': 'error',
                            'error': '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é Stories. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
                        }
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    try:
                        me = await self.client.get_me()
                        participant = await self.client.get_permissions(channel_entity, me)

                        if not participant.is_admin:
                            print("‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≥—Ä—É–ø–ø–∞—Ö —ç—Ç–æ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
                    except:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞: {e}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_file = io.BytesIO(image)
            image_file.name = 'story_image.png'
            image_file.seek(0)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ Telegram
            print("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            uploaded_file = await self.client.upload_file(image_file)

            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –æ–±—ä–µ–∫—Ç
            media = InputMediaUploadedPhoto(file=uploaded_file)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ Story
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Story –≤ —ç—Ç–æ—Ç —á–∞—Ç
                from telethon.tl.functions.stories import CanSendStoryRequest

                can_send = await self.client(CanSendStoryRequest(
                    peer=channel_entity
                ))

                if not can_send:
                    print("‚ùå –ù–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Story –≤ —ç—Ç–æ—Ç —á–∞—Ç")

                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—É–±–ª–∏–∫—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç —Å —Ö–µ—à—Ç–µ–≥–æ–º
                    print("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
                    return await self._publish_as_story_post(channel_entity, image, caption)
            except Exception as e:
                print(f"‚ö†Ô∏è CanSendStoryRequest –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Story –≤ –∫–∞–Ω–∞–ª
            from telethon.tl.functions.stories import SendStoryRequest
            from telethon.tl.types import InputPrivacyValueAllowAll

            # –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π Story
            privacy_rules = [InputPrivacyValueAllowAll()]

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏
            if len(caption) > 200:
                caption = caption[:197] + "..."

            print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Story –≤ –∫–∞–Ω–∞–ª...")
            result = await self.client(SendStoryRequest(
                peer=channel_entity,  # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                media=media,
                caption=caption,
                privacy_rules=privacy_rules,
                pinned=False,  # –ù–µ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º
                noforwards=False,  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É
                period=86400  # 24 —á–∞—Å–∞
            ))

            print("‚úÖ Story —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")

            return {
                'status': 'success',
                'story_id': result.updates[0].id if hasattr(result, 'updates') and result.updates else None,
                'type': 'channel_story'
            }

        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story –≤ –∫–∞–Ω–∞–ª: {error_msg}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if "STORIES_TOO_MUCH" in error_msg:
                return {
                    'status': 'error',
                    'error': '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç Stories. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω–æ–≤–æ–π.'
                }
            elif "PREMIUM_ACCOUNT_REQUIRED" in error_msg:
                return {
                    'status': 'error',
                    'error': '–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories –≤ –∫–∞–Ω–∞–ª —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium.'
                }
            elif "CHAT_ADMIN_REQUIRED" in error_msg:
                return {
                    'status': 'error',
                    'error': '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories.'
                }
            elif "PEER_ID_INVALID" in error_msg:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                print("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
                return await self._publish_as_story_post(channel_entity, image, caption)
            else:
                return {
                    'status': 'error',
                    'error': error_msg
                }

    async def _publish_as_story_post(self, entity, image: bytes, caption: str) -> Dict[str, Any]:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫ –ø–æ—Å—Ç —Å –æ—Å–æ–±—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        Args:
            entity: –°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            caption: –ü–æ–¥–ø–∏—Å—å

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            print("üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫ Story-–ø–æ–¥–æ–±–Ω—ã–π –ø–æ—Å—Ç...")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ Story
            story_text = f"üì∏ **STORY** üì∏\n\n{caption}\n\n‚è∞ _–î–æ—Å—Ç—É–ø–Ω–æ 24 —á–∞—Å–∞_\n\n#story #{entity.username if hasattr(entity, 'username') and entity.username else 'story'}"

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_file = io.BytesIO(image)
            image_file.name = 'story_post.png'
            image_file.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
            message = await self.client.send_message(
                entity,
                story_text,
                file=image_file,
                parse_mode='Markdown'
            )

            print("‚úÖ Story-–ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
            # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á

            return {
                'status': 'success',
                'message_id': message.id,
                'type': 'story_post',
                'note': '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∫–∞–∫ –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ Story'
            }

        except Exception as e:
            return {
                'status': 'error',
                'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story-–ø–æ—Å—Ç: {str(e)}'
            }

    async def publish_personal_story(self, image: bytes, caption: str) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ–π Story

        Args:
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –∏—Å—Ç–æ—Ä–∏–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            print("üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ–π Story...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_file = io.BytesIO(image)
            image_file.name = 'personal_story.png'
            image_file.seek(0)

            uploaded_file = await self.client.upload_file(image_file)
            media = InputMediaUploadedPhoto(file=uploaded_file)

            # –ü—É–±–ª–∏–∫—É–µ–º –ª–∏—á–Ω—É—é Story
            from telethon.tl.functions.stories import SendStoryRequest
            from telethon.tl.types import InputPrivacyValueAllowAll

            privacy_rules = [InputPrivacyValueAllowAll()]

            result = await self.client(SendStoryRequest(
                media=media,
                caption=caption[:200] if len(caption) > 200 else caption,
                privacy_rules=privacy_rules,
                period=86400  # 24 —á–∞—Å–∞
            ))

            print("‚úÖ –õ–∏—á–Ω–∞—è Story –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

            return {
                'status': 'success',
                'story_id': result.updates[0].id if hasattr(result, 'updates') and result.updates else None,
                'type': 'personal_story'
            }

        except Exception as e:
            return {
                'status': 'error',
                'error': f'–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª–∏—á–Ω–æ–π Story: {str(e)}'
            }

    async def publish_post(
        self,
        group_username: str,
        text: str,
        image: bytes,
        publish_to_story: bool = True,
        story_type: str = 'channel'  # 'channel', 'personal', –∏–ª–∏ 'both'
    ) -> dict:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ stories

        Args:
            group_username: Username –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã
            text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
            publish_to_story: –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–∏ –≤ stories
            story_type: –¢–∏–ø Story ('channel', 'personal', –∏–ª–∏ 'both')

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
            if not self.client or not self.client.is_connected():
                connected = await self.connect()
                if not connected:
                    raise Exception("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞
            image_file = io.BytesIO(image)
            image_file.name = 'post_image.png'
            image_file.seek(0)

            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
            print(f"üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞: {group_username}")
            try:
                if group_username.startswith('@'):
                    group_username = group_username[1:]

                entity = await self.client.get_entity(group_username)
                entity_title = entity.title if hasattr(entity, 'title') else group_username
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {entity_title}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
                is_channel = hasattr(entity, 'broadcast') and entity.broadcast
                is_megagroup = hasattr(entity, 'megagroup') and entity.megagroup

                print(f"   –¢–∏–ø: {'–ö–∞–Ω–∞–ª' if is_channel else '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞' if is_megagroup else '–ì—Ä—É–ø–ø–∞'}")

            except:
                try:
                    entity = await self.client.get_entity(int(group_username))
                    entity_title = entity.title if hasattr(entity, 'title') else group_username
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ ID: {entity_title}")
                except:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª: {group_username}")

            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø—É
            print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª...")
            message = await self.client.send_message(
                entity,
                text,
                file=image_file
            )
            print(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID: {message.id}")

            result = {
                'group_post': {
                    'status': 'success',
                    'message_id': message.id,
                    'chat_id': entity.id,
                    'chat_title': entity_title
                }
            }

            # –ü—É–±–ª–∏–∫—É–µ–º –≤ Stories –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if publish_to_story:
                story_caption = text[:200] if len(text) > 200 else text

                # –ü—É–±–ª–∏–∫—É–µ–º –≤ Stories –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
                if story_type in ['channel', 'both']:
                    print(f"\nüì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Story –≤ {entity_title}...")
                    channel_story_result = await self.publish_to_channel_story(
                        entity,
                        image,
                        story_caption
                    )
                    result['channel_story'] = channel_story_result

                    if channel_story_result['status'] == 'success':
                        if channel_story_result.get('type') == 'story_post':
                            print("‚ÑπÔ∏è Story –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç")
                        else:
                            print("‚úÖ Story —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
                    else:
                        print(f"‚ö†Ô∏è {channel_story_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

                # –ü—É–±–ª–∏–∫—É–µ–º –ª–∏—á–Ω—É—é Story
                if story_type in ['personal', 'both']:
                    print("\nüì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ–π Story...")
                    personal_story_result = await self.publish_personal_story(
                        image,
                        story_caption
                    )
                    result['personal_story'] = personal_story_result

                    if personal_story_result['status'] == 'success':
                        print("‚úÖ –õ–∏—á–Ω–∞—è Story –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

        finally:
            if self.client and self.client.is_connected():
                await self.client.disconnect()
                print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram")

    async def check_story_support(self, group_username: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Stories –¥–ª—è –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞

        Args:
            group_username: Username –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ Stories
        """
        try:
            if not self.client or not self.client.is_connected():
                await self.connect()

            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å
            if group_username.startswith('@'):
                group_username = group_username[1:]

            entity = await self.client.get_entity(group_username)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ –ø—Ä–∞–≤–∞
            info = {
                'entity_type': 'unknown',
                'supports_stories': False,
                'is_admin': False,
                'has_story_rights': False,
                'requires_premium': False,
                'alternative_method': True
            }

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
            if hasattr(entity, 'broadcast') and entity.broadcast:
                info['entity_type'] = 'channel'
            elif hasattr(entity, 'megagroup') and entity.megagroup:
                info['entity_type'] = 'megagroup'
            else:
                info['entity_type'] = 'group'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if hasattr(entity, 'admin_rights') and entity.admin_rights:
                info['is_admin'] = True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ –Ω–∞ Stories
                if hasattr(entity.admin_rights, 'post_stories'):
                    info['has_story_rights'] = entity.admin_rights.post_stories

            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ Stories –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã
            if info['entity_type'] == 'channel' and info['is_admin']:
                info['supports_stories'] = True
                info['requires_premium'] = True  # –û–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è Premium

            # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å Stories
            elif info['entity_type'] == 'megagroup' and info['is_admin']:
                info['supports_stories'] = True
                info['requires_premium'] = True

            return info

        except Exception as e:
            return {
                'error': str(e),
                'supports_stories': False,
                'alternative_method': True
            }

    async def get_groups(self) -> list:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ Stories

        Returns:
            –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        """
        try:
            if not self.client or not self.client.is_connected():
                await self.connect()

            dialogs = await self.client.get_dialogs()
            groups = []

            for dialog in dialogs:
                if dialog.is_group or dialog.is_channel:
                    group_info = {
                        'id': dialog.entity.id,
                        'title': dialog.title,
                        'username': getattr(dialog.entity, 'username', None),
                        'type': 'channel' if getattr(dialog.entity, 'broadcast', False) else 'group',
                        'is_admin': False,
                        'supports_stories': False
                    }

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if hasattr(dialog.entity, 'admin_rights') and dialog.entity.admin_rights:
                        group_info['is_admin'] = True

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Stories
                        if hasattr(dialog.entity.admin_rights, 'post_stories'):
                            group_info['supports_stories'] = dialog.entity.admin_rights.post_stories

                    groups.append(group_info)

            return groups

        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {str(e)}")

    async def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram

        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
        """
        try:
            await self.connect()
            me = await self.client.get_me()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium —Å—Ç–∞—Ç—É—Å
            has_premium = getattr(me, 'premium', False)
            print(f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {me.first_name}")
            print(f"üíé Premium: {'–î–∞' if has_premium else '–ù–µ—Ç'}")

            if not has_premium:
                print("‚ÑπÔ∏è –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories –≤ –∫–∞–Ω–∞–ª—ã –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è Telegram Premium")

            return True if me else False
        except:
            return False

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.client and self.client.is_connected():
            asyncio.create_task(self.client.disconnect())
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Stories –∫–∞–Ω–∞–ª–æ–≤
–ò–°–ü–†–ê–í–õ–ï–ù–ê –û–®–ò–ë–ö–ê: table version already exists
"""
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.stories import SendStoryRequest, CanSendStoryRequest
from telethon.tl.types import InputMediaUploadedPhoto, InputPrivacyValueAllowAll
import asyncio
import io
from typing import Optional, Dict, Any
import os
import json

class TelegramPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram"""

    # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
    _session_store_file = 'telegram_sessions.json'

    def __init__(self, api_id: str, api_hash: str, phone: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞

        Args:
            api_id: Telegram API ID (–±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —á–∏—Å–ª–æ)
            api_hash: Telegram API Hash
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        """
        # –í–ê–ñ–ù–û: –£–±–µ–¥–∏–º—Å—è —á—Ç–æ api_id - —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            self.api_id = int(str(api_id).strip())
        except ValueError:
            raise Exception(f"API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {api_id}")

        self.api_hash = str(api_hash).strip()
        if not self.api_hash:
            raise Exception("API Hash –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        self.phone = str(phone).strip()
        if not self.phone.startswith('+'):
            self.phone = '+' + self.phone

        self.client = None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º string session
        self.session_string = self._load_session()

        print(f"‚úÖ Telegram Publisher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        print(f"   API ID: {self.api_id}")
        print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}")
        print(f"   –°–µ—Å—Å–∏—è: {'–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è' if self.session_string else '–ù–æ–≤–∞—è'}")

    def _load_session(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            if os.path.exists(self._session_store_file):
                with open(self._session_store_file, 'r') as f:
                    sessions = json.load(f)
                    return sessions.get(self.phone, '')
            return ''
        except:
            return ''

    def _save_session(self, session_string: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            sessions = {}
            if os.path.exists(self._session_store_file):
                with open(self._session_store_file, 'r') as f:
                    sessions = json.load(f)

            sessions[self.phone] = session_string

            with open(self._session_store_file, 'w') as f:
                json.dump(sessions, f, indent=2)

            print("üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º StringSession"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.client and self.client.is_connected():
                await self.client.disconnect()
                print("üîå –°—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º StringSession –≤–º–µ—Å—Ç–æ SQLite
            if self.session_string:
                session = StringSession(self.session_string)
                print("üìÇ –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é")
            else:
                session = StringSession()
                print("üÜï –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")

            self.client = TelegramClient(
                session,
                self.api_id,
                self.api_hash,
                connection_retries=5,
                retry_delay=1,
                timeout=30
            )

            print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await self.client.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            is_authorized = await self.client.is_user_authorized()

            if not is_authorized:
                print("üì± –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥
                    await self.client.send_code_request(self.phone)
                    print("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä " + self.phone)
                    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ...")

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥
                    return False

                except Exception as e:
                    error_msg = str(e)
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {error_msg}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                    if "flood" in error_msg.lower():
                        raise Exception("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
                    elif "phone_number_invalid" in error_msg.lower():
                        raise Exception(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {self.phone}")
                    elif "api_id_invalid" in error_msg.lower():
                        raise Exception("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è API ID/Hash. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials –Ω–∞ my.telegram.org")
                    else:
                        raise

            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
            me = await self.client.get_me()
            print(f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {me.first_name} {me.last_name or ''}")

            if hasattr(me, 'username') and me.username:
                print(f"   Username: @{me.username}")

            if hasattr(me, 'premium') and me.premium:
                print("   üíé Telegram Premium: –î–∞")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not self.session_string:
                self.session_string = self.client.session.save()
                self._save_session(self.session_string)

            return True

        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error_msg}")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if "api_id" in error_msg.lower() or "api_hash" in error_msg.lower():
                print("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å API credentials:")
                print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API ID –∏ API Hash")
                print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ credentials –æ—Ç my.telegram.org")
                print("3. API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                print(f"\n–í–∞—à API ID: {self.api_id} (—Ç–∏–ø: {type(self.api_id).__name__})")
            elif "phone" in error_msg.lower():
                print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {self.phone}")
                print("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX")

            raise

    async def verify_code(self, code: str):
        """
        –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

        Args:
            code: –ö–æ–¥ –∏–∑ Telegram
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            if not self.client:
                print("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
                await self.connect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not self.client.is_connected():
                print("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                await self.client.connect()

            print(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º: {code}")

            # –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
            code = code.strip().replace(' ', '').replace('-', '')

            if len(code) != 5:
                raise Exception(f"–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 —Ü–∏—Ñ—Ä, –ø–æ–ª—É—á–µ–Ω–æ: {len(code)} —Å–∏–º–≤–æ–ª–æ–≤")

            # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
            await self.client.sign_in(self.phone, code)

            print("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            me = await self.client.get_me()
            print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")

            # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.session_string = self.client.session.save()
            self._save_session(self.session_string)
            print("üíæ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

            return True

        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {error_msg}")

            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
            if "password" in error_msg.lower() or "2fa" in error_msg.lower():
                print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                raise Exception("–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ 2FA –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            elif "phone_code_invalid" in error_msg.lower():
                raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏–∑ Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Ü–∏—Ñ—Ä.")
            elif "phone_code_expired" in error_msg.lower():
                raise Exception("–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            elif "phone_code_empty" in error_msg.lower():
                raise Exception("–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            elif "session_revoked" in error_msg.lower():
                # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                self.session_string = ''
                self._save_session('')
                raise Exception("–°–µ—Å—Å–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")

            raise Exception(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {error_msg}")

    async def publish_to_channel_story(self, channel_entity, image: bytes, caption: str) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è Story –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É

        Args:
            channel_entity: –°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –∏—Å—Ç–æ—Ä–∏–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            print(f"üì∏ –ü–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                chat_entity = await self.client.get_entity(channel_entity)

                if hasattr(chat_entity, 'admin_rights') and chat_entity.admin_rights:
                    print("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")

                    if hasattr(chat_entity.admin_rights, 'post_stories') and not chat_entity.admin_rights.post_stories:
                        print("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é Stories –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ")
                        return {
                            'status': 'error',
                            'error': '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é Stories. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
                        }
                else:
                    try:
                        me = await self.client.get_me()
                        participant = await self.client.get_permissions(channel_entity, me)

                        if not participant.is_admin:
                            print("‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
                    except:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞: {e}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_file = io.BytesIO(image)
            image_file.name = 'story_image.png'
            image_file.seek(0)

            print("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            uploaded_file = await self.client.upload_file(image_file)

            media = InputMediaUploadedPhoto(file=uploaded_file)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ Story
            try:
                can_send = await self.client(CanSendStoryRequest(
                    peer=channel_entity
                ))

                if not can_send:
                    print("‚ùå –ù–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Story –≤ —ç—Ç–æ—Ç —á–∞—Ç")
                    print("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
                    return await self._publish_as_story_post(channel_entity, image, caption)
            except Exception as e:
                print(f"‚ö†Ô∏è CanSendStoryRequest –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {e}")

            privacy_rules = [InputPrivacyValueAllowAll()]

            if len(caption) > 200:
                caption = caption[:197] + "..."

            print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Story –≤ –∫–∞–Ω–∞–ª...")
            result = await self.client(SendStoryRequest(
                peer=channel_entity,
                media=media,
                caption=caption,
                privacy_rules=privacy_rules,
                pinned=False,
                noforwards=False,
                period=86400
            ))

            print("‚úÖ Story —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")

            return {
                'status': 'success',
                'story_id': result.updates[0].id if hasattr(result, 'updates') and result.updates else None,
                'type': 'channel_story'
            }

        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story –≤ –∫–∞–Ω–∞–ª: {error_msg}")

            if "STORIES_TOO_MUCH" in error_msg:
                return {
                    'status': 'error',
                    'error': '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç Stories. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω–æ–≤–æ–π.'
                }
            elif "PREMIUM_ACCOUNT_REQUIRED" in error_msg:
                return {
                    'status': 'error',
                    'error': '–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories –≤ –∫–∞–Ω–∞–ª —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium.'
                }
            elif "CHAT_ADMIN_REQUIRED" in error_msg:
                return {
                    'status': 'error',
                    'error': '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories.'
                }
            elif "PEER_ID_INVALID" in error_msg:
                print("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
                return await self._publish_as_story_post(channel_entity, image, caption)
            else:
                return {
                    'status': 'error',
                    'error': error_msg
                }

    async def _publish_as_story_post(self, entity, image: bytes, caption: str) -> Dict[str, Any]:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫ –ø–æ—Å—Ç —Å –æ—Å–æ–±—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        Args:
            entity: –°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            caption: –ü–æ–¥–ø–∏—Å—å

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            print("üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∫ Story-–ø–æ–¥–æ–±–Ω—ã–π –ø–æ—Å—Ç...")

            story_text = f"üì∏ **STORY** üì∏\n\n{caption}\n\n‚è∞ _–î–æ—Å—Ç—É–ø–Ω–æ 24 —á–∞—Å–∞_\n\n#story #{entity.username if hasattr(entity, 'username') and entity.username else 'story'}"

            image_file = io.BytesIO(image)
            image_file.name = 'story_post.png'
            image_file.seek(0)

            message = await self.client.send_message(
                entity,
                story_text,
                file=image_file,
                parse_mode='Markdown'
            )

            print("‚úÖ Story-–ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

            return {
                'status': 'success',
                'message_id': message.id,
                'type': 'story_post',
                'note': '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∫–∞–∫ –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ Story'
            }

        except Exception as e:
            return {
                'status': 'error',
                'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story-–ø–æ—Å—Ç: {str(e)}'
            }

    async def publish_personal_story(self, image: bytes, caption: str) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ–π Story

        Args:
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –∏—Å—Ç–æ—Ä–∏–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            print("üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ–π Story...")

            image_file = io.BytesIO(image)
            image_file.name = 'personal_story.png'
            image_file.seek(0)

            uploaded_file = await self.client.upload_file(image_file)
            media = InputMediaUploadedPhoto(file=uploaded_file)

            privacy_rules = [InputPrivacyValueAllowAll()]

            result = await self.client(SendStoryRequest(
                media=media,
                caption=caption[:200] if len(caption) > 200 else caption,
                privacy_rules=privacy_rules,
                period=86400
            ))

            print("‚úÖ –õ–∏—á–Ω–∞—è Story –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

            return {
                'status': 'success',
                'story_id': result.updates[0].id if hasattr(result, 'updates') and result.updates else None,
                'type': 'personal_story'
            }

        except Exception as e:
            return {
                'status': 'error',
                'error': f'–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª–∏—á–Ω–æ–π Story: {str(e)}'
            }

    async def publish_post(
        self,
        group_username: str,
        text: str,
        image: bytes,
        publish_to_story: bool = True,
        story_type: str = 'channel'
    ) -> dict:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ stories

        Args:
            group_username: Username –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã
            text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
            publish_to_story: –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–∏ –≤ stories
            story_type: –¢–∏–ø Story ('channel', 'personal', –∏–ª–∏ 'both')

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
            if not self.client or not self.client.is_connected():
                connected = await self.connect()
                if not connected:
                    raise Exception("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞
            image_file = io.BytesIO(image)
            image_file.name = 'post_image.png'
            image_file.seek(0)

            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
            print(f"üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞: {group_username}")
            try:
                if group_username.startswith('@'):
                    group_username = group_username[1:]

                entity = await self.client.get_entity(group_username)
                entity_title = entity.title if hasattr(entity, 'title') else group_username
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {entity_title}")

                is_channel = hasattr(entity, 'broadcast') and entity.broadcast
                is_megagroup = hasattr(entity, 'megagroup') and entity.megagroup

                print(f"   –¢–∏–ø: {'–ö–∞–Ω–∞–ª' if is_channel else '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞' if is_megagroup else '–ì—Ä—É–ø–ø–∞'}")

            except:
                try:
                    entity = await self.client.get_entity(int(group_username))
                    entity_title = entity.title if hasattr(entity, 'title') else group_username
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ ID: {entity_title}")
                except:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª: {group_username}")

            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø—É
            print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª...")
            message = await self.client.send_message(
                entity,
                text,
                file=image_file
            )
            print(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID: {message.id}")

            result = {
                'group_post': {
                    'status': 'success',
                    'message_id': message.id,
                    'chat_id': entity.id,
                    'chat_title': entity_title
                }
            }

            # –ü—É–±–ª–∏–∫—É–µ–º –≤ Stories –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if publish_to_story:
                story_caption = text[:200] if len(text) > 200 else text

                if story_type in ['channel', 'both']:
                    print(f"\nüì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Story –≤ {entity_title}...")
                    channel_story_result = await self.publish_to_channel_story(
                        entity,
                        image,
                        story_caption
                    )
                    result['channel_story'] = channel_story_result

                    if channel_story_result['status'] == 'success':
                        if channel_story_result.get('type') == 'story_post':
                            print("‚ÑπÔ∏è Story –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç")
                        else:
                            print("‚úÖ Story —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
                    else:
                        print(f"‚ö†Ô∏è {channel_story_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

                if story_type in ['personal', 'both']:
                    print("\nüì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ–π Story...")
                    personal_story_result = await self.publish_personal_story(
                        image,
                        story_caption
                    )
                    result['personal_story'] = personal_story_result

                    if personal_story_result['status'] == 'success':
                        print("‚úÖ –õ–∏—á–Ω–∞—è Story –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

        finally:
            # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            pass

    async def check_story_support(self, group_username: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Stories –¥–ª—è –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞"""
        try:
            if not self.client or not self.client.is_connected():
                await self.connect()

            if group_username.startswith('@'):
                group_username = group_username[1:]

            entity = await self.client.get_entity(group_username)

            info = {
                'entity_type': 'unknown',
                'supports_stories': False,
                'is_admin': False,
                'has_story_rights': False,
                'requires_premium': False,
                'alternative_method': True
            }

            if hasattr(entity, 'broadcast') and entity.broadcast:
                info['entity_type'] = 'channel'
            elif hasattr(entity, 'megagroup') and entity.megagroup:
                info['entity_type'] = 'megagroup'
            else:
                info['entity_type'] = 'group'

            if hasattr(entity, 'admin_rights') and entity.admin_rights:
                info['is_admin'] = True

                if hasattr(entity.admin_rights, 'post_stories'):
                    info['has_story_rights'] = entity.admin_rights.post_stories

            if info['entity_type'] == 'channel' and info['is_admin']:
                info['supports_stories'] = True
                info['requires_premium'] = True

            elif info['entity_type'] == 'megagroup' and info['is_admin']:
                info['supports_stories'] = True
                info['requires_premium'] = True

            return info

        except Exception as e:
            return {
                'error': str(e),
                'supports_stories': False,
                'alternative_method': True
            }

    async def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.client and self.client.is_connected():
            await self.client.disconnect()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.client and self.client.is_connected():
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    loop.create_task(self.client.disconnect())
                else:
                    loop.run_until_complete(self.client.disconnect())
        except:
            pass
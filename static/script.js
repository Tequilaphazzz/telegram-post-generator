// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
let approvals = {
    text: false,
    image: false,
    headline: false
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    loadConfig();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function loadConfig() {
    try {
        const response = await fetch('/get_config');
        const data = await response.json();
        
        if (data.status === 'success' && data.config) {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            for (const [key, value] of Object.entries(data.config)) {
                const element = document.getElementById(key);
                if (element) {
                    element.value = value || '';
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
document.getElementById('configForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = {
        openai_key: document.getElementById('openai_key').value,
        stability_key: document.getElementById('stability_key').value,
        telegram_api_id: document.getElementById('telegram_api_id').value,
        telegram_api_hash: document.getElementById('telegram_api_hash').value,
        telegram_phone: document.getElementById('telegram_phone').value,
        telegram_group: document.getElementById('telegram_group').value
    };
    
    showLoader();
    
    try {
        const response = await fetch('/save_config', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            showMessage('success', '‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            showMessage('danger', `‚ùå –û—à–∏–±–∫–∞: ${data.message}`);
        }
    } catch (error) {
        showMessage('danger', `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
    } finally {
        hideLoader();
    }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
document.getElementById('generateForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const topic = document.getElementById('topic').value;
    
    if (!topic) {
        showMessage('warning', '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞');
        return;
    }
    
    // –°–±—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω–∏–π
    resetApprovals();
    
    showLoader();
    showMessage('info', 'üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');
    
    try {
        const response = await fetch('/generate_content', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ topic })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            displayPreview(data.data);
            showMessage('success', '‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
        } else {
            showMessage('danger', `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${data.message}`);
        }
    } catch (error) {
        showMessage('danger', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        hideLoader();
    }
});

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function displayPreview(data) {
    document.getElementById('postTextPreview').textContent = data.text;
    document.getElementById('imagePreview').src = data.image;
    document.getElementById('headlinePreview').textContent = data.headline;
    
    document.getElementById('previewCard').style.display = 'block';
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
    document.getElementById('previewCard').scrollIntoView({ behavior: 'smooth' });
}

// –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function regenerateContent(type) {
    showLoader();
    showMessage('info', `üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ${getTypeName(type)}...`);
    
    try {
        const response = await fetch('/regenerate_content', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ type })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å
            if (type === 'text') {
                document.getElementById('postTextPreview').textContent = data.data.text;
                approvals.text = false;
            } else if (type === 'image') {
                document.getElementById('imagePreview').src = data.data.image;
                approvals.image = false;
            } else if (type === 'headline') {
                document.getElementById('headlinePreview').textContent = data.data.headline;
                document.getElementById('imagePreview').src = data.data.image;
                approvals.headline = false;
            }
            
            updateApprovalStatus();
            showMessage('success', `‚úÖ ${getTypeName(type)} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`);
        } else {
            showMessage('danger', `‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${data.message}`);
        }
    } catch (error) {
        showMessage('danger', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        hideLoader();
    }
}

// –û–¥–æ–±—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function approveContent(type) {
    approvals[type] = true;
    updateApprovalStatus();
    showMessage('success', `‚úÖ ${getTypeName(type)} –æ–¥–æ–±—Ä–µ–Ω!`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
function updateApprovalStatus() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂–∏
    updateBadge('textApproval', approvals.text);
    updateBadge('imageApproval', approvals.image);
    updateBadge('headlineApproval', approvals.headline);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–æ
    const publishBtn = document.getElementById('publishBtn');
    if (approvals.text && approvals.image && approvals.headline) {
        publishBtn.disabled = false;
        publishBtn.classList.add('btn-success');
        publishBtn.classList.remove('btn-primary');
    } else {
        publishBtn.disabled = true;
        publishBtn.classList.add('btn-primary');
        publishBtn.classList.remove('btn-success');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞
function updateBadge(elementId, approved) {
    const badge = document.getElementById(elementId);
    if (approved) {
        badge.textContent = '–û–¥–æ–±—Ä–µ–Ω–æ';
        badge.className = 'badge bg-success';
    } else {
        badge.textContent = '–û–∂–∏–¥–∞–µ—Ç';
        badge.className = 'badge bg-secondary';
    }
}

// –°–±—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω–∏–π
function resetApprovals() {
    approvals = {
        text: false,
        image: false,
        headline: false
    };
    updateApprovalStatus();
}

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
async function publishPost() {
    if (!approvals.text || !approvals.image || !approvals.headline) {
        showMessage('warning', '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–æ–±—Ä–∏—Ç–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π');
        return;
    }
    
    showLoader();
    showMessage('info', 'üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram...');
    
    try {
        const response = await fetch('/publish_post', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            showMessage('success', 'üéâ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram!');
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            document.getElementById('topic').value = '';
            document.getElementById('previewCard').style.display = 'none';
            resetApprovals();
        } else {
            if (data.message.includes('–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è')) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                const modal = new bootstrap.Modal(document.getElementById('telegramCodeModal'));
                modal.show();
            } else {
                showMessage('danger', `‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${data.message}`);
            }
        }
    } catch (error) {
        showMessage('danger', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        hideLoader();
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ Telegram
document.getElementById('codeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const code = document.getElementById('telegram_code').value;
    
    showLoader();
    
    try {
        const response = await fetch('/verify_telegram_code', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ code })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            showMessage('success', '‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.');
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            bootstrap.Modal.getInstance(document.getElementById('telegramCodeModal')).hide();
            // –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
            publishPost();
        } else {
            showMessage('danger', `‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${data.message}`);
        }
    } catch (error) {
        showMessage('danger', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        hideLoader();
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getTypeName(type) {
    const names = {
        'text': '–¢–µ–∫—Å—Ç',
        'image': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        'headline': '–ó–∞–≥–æ–ª–æ–≤–æ–∫'
    };
    return names[type] || type;
}

function showLoader() {
    document.getElementById('loader').classList.remove('d-none');
}

function hideLoader() {
    document.getElementById('loader').classList.add('d-none');
}

function showMessage(type, message) {
    const messagesDiv = document.getElementById('messages');
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    messagesDiv.appendChild(alertDiv);
    
    // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∏—Å—á–µ–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
}
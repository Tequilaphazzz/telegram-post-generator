"""
–°–∫—Ä–∏–ø—Ç QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ñ–ª—É–¥-–±–∞–Ω–∞ –Ω–∞ SMS
–†–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º utils/telegram_publisher.py
"""
import asyncio
import json
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from utils.telegram_publisher import TelegramPublisher


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json"""
    if os.path.exists('config.json'):
        with open('config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


async def qr_login():
    """QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π TelegramPublisher"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()

    api_id = config.get('telegram_api_id')
    api_hash = config.get('telegram_api_hash')
    phone = config.get('telegram_phone')

    print("=" * 60)
    print("üîê QR-–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø TELEGRAM")
    print("=" * 60)
    print(f"\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    print(f"üîë API ID: {api_id}")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if not api_id or not api_hash:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API_ID –∏–ª–∏ API_HASH –≤ config.json")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
        return False

    print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")

    # –°–æ–∑–¥–∞–µ–º publisher
    publisher = TelegramPublisher(
        api_id=str(api_id),
        api_hash=api_hash,
        phone=phone
    )

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    connected = await publisher.connect()

    if connected:
        print("\n‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
        me = await publisher.get_me()
        if me:
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''}")
            print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç
        choice = input("\nüéØ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é Stories? (y/n): ").lower()
        if choice == 'y':
            await test_story_publication(publisher)

        await publisher.disconnect()
        return True

    # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, publisher —É–∂–µ –ø–æ–∫–∞–∑–∞–ª QR-–∫–æ–¥
    # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    print("\nüì± –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print("=" * 60)
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ")
    print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
    print("3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ")
    print("4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥")
    print("=" * 60)

    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É qrcode –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        if hasattr(publisher, '_qr_login') and publisher._qr_login:
            import qrcode

            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(publisher._qr_login.url)
            qr.make(fit=True)

            print("\nQR-–ö–û–î:")
            qr.print_ascii(invert=True)
    except ImportError:
        print("\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ qrcode –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
        print("pip install qrcode[pil]")

    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (60 —Å–µ–∫—É–Ω–¥)...")
    print("üí° –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–µ—Ç–µ, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ")

    # –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    try:
        start_time = asyncio.get_event_loop().time()
        timeout = 60

        while asyncio.get_event_loop().time() - start_time < timeout:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if await publisher.client.is_user_authorized():
                print("\n‚úÖ QR-–∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!")

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                me = await publisher.get_me()
                if me:
                    print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''}")
                    print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
                session_string = publisher.client.session.save()
                publisher._save_session(session_string)

                print("\nüíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                print("‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç
                choice = input("\nüéØ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é Stories? (y/n): ").lower()
                if choice == 'y':
                    await test_story_publication(publisher)

                await publisher.disconnect()
                return True

            # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(2)
            remaining = int(timeout - (asyncio.get_event_loop().time() - start_time))
            print(f"\r‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... (–æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫)", end='', flush=True)

        print("\n\n‚ùå –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. QR-–∫–æ–¥ –Ω–µ –±—ã–ª –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω.")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

    finally:
        await publisher.disconnect()

    return False


async def test_story_publication(publisher):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories"""
    print("\n" + "=" * 60)
    print("üì∏ –¢–ï–°–¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò STORIES")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    try:
        from PIL import Image, ImageDraw, ImageFont
        import io

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 9:16 (1080x1920)
        img = Image.new('RGB', (1080, 1920), color='#667eea')
        draw = ImageDraw.Draw(img)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        text = "–¢–µ—Å—Ç Stories"

        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
        try:
            font = ImageFont.truetype("arial.ttf", 100)
        except:
            font = ImageFont.load_default()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

        x = (1080 - text_width) // 2
        y = (1920 - text_height) // 2

        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±–≤–æ–¥–∫–æ–π
        for adj in range(-3, 4):
            for adj2 in range(-3, 4):
                if adj != 0 or adj2 != 0:
                    draw.text((x+adj, y+adj2), text, font=font, fill='black')
        draw.text((x, y), text, font=font, fill='white')

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
        from datetime import datetime
        time_text = datetime.now().strftime("%H:%M:%S")
        draw.text((50, 1850), time_text, font=font, fill='white')

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        img_bytes = io.BytesIO()
        img.save(img_bytes, format='JPEG', quality=95)
        img_bytes.seek(0)
        image_data = img_bytes.read()

        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")

    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Pillow –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
        print("pip install Pillow")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ Story
    print("\nüì∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø Story:")
    print("1. –õ–∏—á–Ω–∞—è Story")
    print("2. Story –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É")
    print("3. –û–±–µ")

    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()

    story_type = 'personal'
    if choice == '2':
        story_type = 'channel'
    elif choice == '3':
        story_type = 'both'

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ Story –≤ –∫–∞–Ω–∞–ª
    group_username = None
    if story_type in ('channel', 'both'):
        config = load_config()
        group_username = config.get('telegram_group')
        if not group_username:
            group_username = input("\nüì¢ –í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (—Å @ –∏–ª–∏ –±–µ–∑): ").strip()

    # –ü—É–±–ª–∏–∫—É–µ–º
    print("\nüì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è...")

    try:
        if story_type == 'personal':
            # –¢–æ–ª—å–∫–æ –ª–∏—á–Ω–∞—è Story
            result = await publisher._publish_personal_story(
                image_data,
                "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è Story –æ—Ç –±–æ—Ç–∞"
            )
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        elif story_type == 'channel' and group_username:
            # Story –≤ –∫–∞–Ω–∞–ª
            entity = await publisher.client.get_entity(group_username)
            result = await publisher._publish_channel_story(
                entity,
                image_data,
                "üì∏ –¢–µ—Å—Ç–æ–≤–∞—è Story –≤ –∫–∞–Ω–∞–ª"
            )
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        elif story_type == 'both' and group_username:
            # –û–±–µ Stories
            results = await publisher.publish_post(
                group_username=group_username,
                text="üîß –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å Stories",
                image=image_data,
                publish_to_story=True,
                story_type='both'
            )

            print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for key, value in results.items():
                print(f"   {key}: {value}")

        print("\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")


if __name__ == '__main__':
    print("üöÄ –°–ö–†–ò–ü–¢ QR-–ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
    print("–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–±—Ö–æ–¥–∏—Ç —Ñ–ª—É–¥-–±–∞–Ω –Ω–∞ SMS-–∫–æ–¥—ã\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qrcode
    try:
        import qrcode
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except ImportError:
        print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞:")
        print("pip install qrcode[pil]\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config.get('telegram_api_id') or not config.get('telegram_api_hash'):
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:")
        print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã API_ID –∏–ª–∏ API_HASH")
        print("\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python app.py")
        print("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        sys.exit(1)

    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã\n")

    try:
        asyncio.run(qr_login())
    except KeyboardInterrupt:
        print("\n\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
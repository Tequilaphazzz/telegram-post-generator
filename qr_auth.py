"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ QR-–∫–æ–¥
–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –û–ë–•–û–î–ò–¢ —Ñ–ª—É–¥-–±–∞–Ω –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É SMS –∫–æ–¥–æ–≤!
"""
import asyncio
from telethon import TelegramClient
from telethon.sessions import StringSession
import json
import os

# –í–ê–®–ò –î–ê–ù–ù–´–ï (–±–µ—Ä–µ–º –∏–∑ config.json)
def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json"""
    if os.path.exists('config.json'):
        with open('config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

config = load_config()

API_ID = config.get('telegram_api_id')
API_HASH = config.get('telegram_api_hash')
PHONE = config.get('telegram_phone')

print("=" * 60)
print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø TELEGRAM –ß–ï–†–ï–ó QR-–ö–û–î")
print("=" * 60)
print(f"\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {PHONE}")
print(f"üîë API ID: {API_ID}")
print("=" * 60)


async def qr_login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ QR-–∫–æ–¥"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if not API_ID or not API_HASH:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API_ID –∏–ª–∏ API_HASH –≤ config.json")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
        return False

    print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—É—Å—Ç–æ–π StringSession
    client = TelegramClient(
        StringSession(),
        int(API_ID),
        API_HASH,
        connection_retries=5
    )

    await client.connect()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if await client.is_user_authorized():
        print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
        me = await client.get_me()
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''}")
        print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        session_string = client.session.save()
        save_session(me.phone, session_string)

        await client.disconnect()
        return True

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º QR-–∫–æ–¥
    print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    print("=" * 60)

    try:
        qr_login_obj = await client.qr_login()

        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É qrcode
        try:
            import qrcode

            print("\nüì± –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
            print("=" * 60)
            print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ")
            print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            print("3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∏–∂–µ:")
            print("=" * 60)
            print()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º QR-–∫–æ–¥
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(qr_login_obj.url)
            qr.make(fit=True)

            # –í—ã–≤–æ–¥–∏–º QR –≤ –∫–æ–Ω—Å–æ–ª—å (ASCII)
            qr.print_ascii(invert=True)

        except ImportError:
            print("\n‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install qrcode[pil]")
            print("\n–ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:")
            print(qr_login_obj.url)

        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞... (60 —Å–µ–∫—É–Ω–¥)")
        print("üí° –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–µ—Ç–µ, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ")
        print()

        # –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (60 —Å–µ–∫—É–Ω–¥)
        await asyncio.wait_for(qr_login_obj.wait(), timeout=60)

        print("\n‚úÖ QR-–∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        me = await client.get_me()
        print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''}")
        print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        session_string = client.session.save()
        save_session(me.phone, session_string)

        print("\nüíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ telegram_sessions.json!")
        print("‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")
        print("\nüìå –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
        print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç (–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)")

        await client.disconnect()
        return True

    except asyncio.TimeoutError:
        print("\n‚ùå –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. QR-–∫–æ–¥ –Ω–µ –±—ã–ª –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω.")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ")
        await client.disconnect()
        return False

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        await client.disconnect()
        return False


def save_session(phone: str, session_string: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª"""
    session_file = 'telegram_sessions.json'

    try:
        sessions = {}
        if os.path.exists(session_file):
            try:
                with open(session_file, 'r') as f:
                    sessions = json.load(f)
            except:
                sessions = {}

        sessions[phone] = session_string

        with open(session_file, 'w') as f:
            json.dump(sessions, f, indent=2)

        print(f"üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è: {phone}")

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qrcode
    try:
        import qrcode
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except ImportError:
        print("\n‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞:")
        print("pip install qrcode[pil]")
        print("\n–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –±–µ–∑ –Ω–µ–µ (–±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞)\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not API_ID or not API_HASH:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:")
        print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã API_ID –∏–ª–∏ API_HASH")
        print("\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
        print("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        exit(1)

    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã\n")

    try:
        asyncio.run(qr_login())
    except KeyboardInterrupt:
        print("\n\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
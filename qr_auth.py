"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ QR-–∫–æ–¥
–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –û–ë–•–û–î–ò–¢ —Ñ–ª—É–¥-–±–∞–Ω –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É SMS –∫–æ–¥–æ–≤!
"""
import asyncio
from telethon import TelegramClient
from telethon.sessions import StringSession
import json
import qrcode
from io import BytesIO

# –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø
API_ID = 11638443  # –í–∞—à API ID
API_HASH = "6c06136800f1362a046450febaa29f0a"  # –í–∞—à API Hash
PHONE = "+79168833425"  # –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏)


async def qr_login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ QR-–∫–æ–¥"""
    print("=" * 50)
    print("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ß–ï–†–ï–ó QR-–ö–û–î")
    print("–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–±—Ö–æ–¥–∏—Ç —Ñ–ª—É–¥-–±–∞–Ω!")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—É—Å—Ç–æ–π —Å–µ—Å—Å–∏–µ–π
    client = TelegramClient(StringSession(), API_ID, API_HASH)

    await client.connect()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if await client.is_user_authorized():
        print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
        me = await client.get_me()
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        session_string = client.session.save()
        save_session(PHONE, session_string)

        await client.disconnect()
        return True

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º QR-–∫–æ–¥
    print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞...")
    qr_login_obj = await client.qr_login()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è QR
    url = qr_login_obj.url
    print("\nüì± –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print("=" * 50)
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ")
    print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
    print("3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∏–∂–µ:")
    print("=" * 50)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º QR-–∫–æ–¥
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(url)
    qr.make(fit=True)

    # –í—ã–≤–æ–¥–∏–º QR –≤ –∫–æ–Ω—Å–æ–ª—å (ASCII)
    qr.print_ascii(invert=True)

    print("\n–ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:")
    print(url)
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è... (60 —Å–µ–∫—É–Ω–¥)")

    try:
        # –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (60 —Å–µ–∫—É–Ω–¥)
        await asyncio.wait_for(qr_login_obj.wait(), timeout=60)

        print("\n‚úÖ QR-–∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        me = await client.get_me()
        print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''}")
        print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        session_string = client.session.save()
        save_session(me.phone, session_string)

        print("\nüíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        print("‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")

        await client.disconnect()
        return True

    except asyncio.TimeoutError:
        print("\n‚ùå –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. QR-–∫–æ–¥ –Ω–µ –±—ã–ª –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω.")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ.")
        await client.disconnect()
        return False


def save_session(phone: str, session_string: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª"""
    session_file = 'telegram_sessions.json'

    try:
        sessions = {}
        try:
            with open(session_file, 'r') as f:
                sessions = json.load(f)
        except:
            pass

        sessions[phone] = session_string

        with open(session_file, 'w') as f:
            json.dump(sessions, f, indent=2)

        print(f"üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è: {phone}")

    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qrcode
    try:
        import qrcode
    except ImportError:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install qrcode[pil]")
        exit()

    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ API_ID –∏ API_HASH –≤ —Å–∫—Ä–∏–ø—Ç–µ!")
    print("PHONE –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å - –æ–Ω –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ–Ω–µ–Ω—ã
    if API_ID == 12345678 or API_HASH == "your_api_hash_here":
        print("‚ùå –í—ã –Ω–µ –∑–∞–º–µ–Ω–∏–ª–∏ API_ID –∏–ª–∏ API_HASH!")
        print("–û—Ç–∫—Ä–æ–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        exit()

    print("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ", end='')
    answer = input().strip().lower()

    if answer == 'y':
        asyncio.run(qr_login())
    else:
        print("–û—Ç–º–µ–Ω–µ–Ω–æ")